/**
******************************************************************************
* File Name          : main.c
* Description        : Main program body
******************************************************************************
** This notice applies to any and all portions of this file
* that are not between comment pairs USER CODE BEGIN and
* USER CODE END. Other portions of this file, whether 
* inserted by the user or by software development tools
* are owned by their respective copyright owners.
*
* COPYRIGHT(c) 2018 STMicroelectronics
*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted provided that the following conditions are met:
*   1. Redistributions of source code must retain the above copyright notice,{}
*      this list of conditions and the following disclaimer.
*   2. Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution.
*   3. Neither the name of STMicroelectronics nor the names of its contributors
*      may be used to endorse or promote products derived from this software
*      without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
******************************************************************************
*/
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32l0xx_hal.h"
#include "i2c.h"
#include "lptim.h"
#include "rtc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include "variables.h"
#include "pulse_meter.h"
#include "lid.h"
#include "ctmeter.h"
#include "eeprom.h"
#include "watchdog.h"
#include "b2.h"
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
/* Interrupt flags */


uint32_t FLAG_B3_has_been_pressed = 0;
/* USART RX buffer */
uint32_t usartrx_bytecounter = 0;
uint32_t usartrx_stringlength = 0;
uint8_t usartrx_char;
uint8_t usartrx_buffer[MAX_RESPONSE_LENGTH];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE END PFP */



/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

#ifdef TEST_BUILD
int	DO_ALL(void)
#else
int main(void)
#endif
{

	/* USER CODE BEGIN 1 */
	CTMeter *meter = CTMeter_get();
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */
	
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */
	
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_USART1_UART_Init();
	MX_I2C1_Init();
	MX_LPTIM1_Init();
	MX_RTC_Init();
	MX_TIM2_Init();
	MX_TIM22_Init();

	/* USER CODE BEGIN 2 */
	DEBUG("\rHello word!\n");
	
	// Initialize the events structure
	meter->events.EVT_B3_has_been_pressed = 0;
	meter->events.EVT_B2_has_been_pressed = 0;
	meter->events.EVT_Magnetic_sensor = 0;
	meter->events.EVT_Timer = 0;
	meter->events.EVT_Valve = 0;
	meter->events.EVT_Message_from_radio_module = 0;
	meter->lid_has_just_been_opened = BOOL_FALSE;
		
	/* Initialize all configured modules */
	PULSEMETER_Init();
	ACCELEROMETER_Init();
	LORAMODULE_Init();
	VALVE_Init();
	CTMeter_Init();
	init_LidModule();
	
	
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
#ifndef TEST_BUILD
	while (1) {
#endif
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		/*************************************************************************/
		if (CTMeter_awaken_by_button_push() == BOOL_TRUE)
			HAL_Delay(1000);
		CTMeter_modeSwitcher();
		/*************************************************************************/		
	
		CTMeter_modeRunner();

		

#ifndef PCB_0666_01
		CTMeter_handleLid();
#endif

		// Go in stop for the MCU and the peripherals
		CTMeter_GotoStopMode();

		// If sleeping, wake-up from stop mode (possible this routine
		// has already been called through the gpio interrupt)
		if (meter->in_StopMode == BOOL_TRUE)
			CTMeter_ReturnStopMode();
	
#ifndef TEST_BUILD
	} // End While
#endif
	/* USER CODE END 3 */

}

/** System Clock Configuration
 */
void SystemClock_Config(void)
{

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Configure the main internal regulator output voltage 
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/**Configure LSE Drive Capability 
	 */
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

	/**Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
		|RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = 16;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks 
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
		|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
		|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
		|RCC_PERIPHCLK_LPTIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time 
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

	/**Configure the Systick 
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	usartrx_buffer[usartrx_bytecounter] = usartrx_char;
	usartrx_bytecounter++;
	
	if (usartrx_char == '\n'){
		usartrx_stringlength = usartrx_bytecounter;
		usartrx_bytecounter = 0;
		flowmeter.events.EVT_Message_from_radio_module = 1;
		/* Parse radio message and send to sleep */
		/* We compare it against "ac_" instead of "mac_" because we found
		   in some cases the MCU receiving the first character wrong (e.g. "$%ac_")
		   and the three acceptable answer are mac_tx_ok, mac_rx and mac_err */
		if(strstr((const char *) usartrx_buffer, "ac_") != NULL) {
			flowmeter.radio_status.send_state = RADIO_NOT_BUSY; // remove RADIO_BUSY flag after reception of command
			loramodule_radioSleep(0xFFFFFFFF);
		} else {
			HAL_UART_Receive_IT(&RADIO_UART, &usartrx_char, 1);
		}
	} else {
		HAL_UART_Receive_IT(&RADIO_UART, &usartrx_char, 1);
	}
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
	HAL_RTCEx_SetWakeUpTimer_IT(hrtc, IWDG_REFRESH_UNIT_S, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
	// If we are in the FIELD or MAINTENANCE mode, we must be able to join the network
	if ( flowmeter.status & CTMETER_IN_FIELD_MODE ) {
		flowmeter.events.EVT_Timer++;
		// If we have not yet join the network, then update the IWDG to let enought time to join it
		if ( flowmeter.radio_status.join_state == RADIO_NOT_JOINED ) {
			HAL_IWDG_Refresh(&hiwdg);
		}
	}
	// If we are in the MAINTENANCE mode, we must wait exit from this mode or a timeout
	if ( flowmeter.status & CTMETER_IN_MAINTENANCE_MODE ) {
		HAL_IWDG_Refresh(&hiwdg);
	}
	// if the valve is opening or closing we refresh the IWDG
	if ( flowmeter.valve_status == VALVE_UNKNOWN ) {
		HAL_IWDG_Refresh(&hiwdg);
	}
}

/* Function called when interrupt with EXTIs */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (GPIO_Pin == BUTTON1_Pin)
	{
		FLAG_B3_has_been_pressed++;
	}
	if (GPIO_Pin == BUTTON2_Pin)
	{
		inc_b2_press_count();
	}
#ifndef PCB_0666_01
	if (GPIO_Pin == LID_Pin) {
		if (flowmeter.in_StopMode == BOOL_TRUE) {
			CTMeter_ReturnStopMode();
		}
		set_LidState(read_LidPinState());
	}
#endif
	if (GPIO_Pin == MAGNETIC_SENSOR_Pin)
	{
		flowmeter.events.EVT_Magnetic_sensor++;
	}
}


/* USER CODE END 4 */


/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void _Error_Handler(char * file, int line)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	CTMeter_Reset(RESTART_HALERROR);
	while(1) 
	{
	}
	/* USER CODE END Error_Handler_Debug */ 
}

#ifdef USE_FULL_ASSERT

/**
 * @brief Reports the name of the source file and the source line number
 * where the assert_param error has occurred.
 * @param file: pointer to the source file name
 * @param line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */

}

#endif

/**
 * @}
 */ 

/**
 * @}
 */ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
