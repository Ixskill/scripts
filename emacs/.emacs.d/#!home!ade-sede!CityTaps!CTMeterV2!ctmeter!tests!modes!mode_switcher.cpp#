#include <CppUTest/TestHarness.h>
#include <CppUTestExt/MockSupport.h>
#include "mode_helper.h"
#include "meter_setup.h"

extern "C" {
#include "ctmeter.h"
#include "eeprom.h"
#include "variables.h"
#include "bool.h"
#include <string.h>
}

/*
 *		List of required Tests
 */

TEST_GROUP(DO_ALL) {
	CTMeter *meter;
	void	setup() {
		setup_meter(&meter);
		setup_fake_runner();
		set_b2_press_count(0);
	}

	void	teardown() {
	}
};

TEST(DO_ALL, reset_press_count) {
	mock().ignoreOtherCalls();
	set_b2_press_count(10);
	DO_ALL();
	CHECK_EQUAL(get_b2_press_count(), 0);
}

TEST_GROUP(DO_ALL_INIT) {
	CTMeter *meter;
	void	setup() {
		setup_meter(&meter);
		set_b2_press_count(0);
	}

	void	teardown() {
		mock().clear();
	}
};

TEST(DO_ALL_INIT, events_are_0ed) {
	mock().ignoreOtherCalls();

	meter->events.EVT_B3_has_been_pressed = 1;
	meter->events.EVT_B2_has_been_pressed = 1;
	meter->events.EVT_Magnetic_sensor = 1;
	meter->events.EVT_Timer = 1;
	meter->events.EVT_Valve = 1;
	meter->events.EVT_Message_from_radio_module = 1;
	meter->lid_has_just_been_opened = BOOL_TRUE;

	DO_ALL();
	CHECK_EQUAL(meter->events.EVT_B3_has_been_pressed, 0);
	CHECK_EQUAL(meter->events.EVT_B2_has_been_pressed, 0);
	CHECK_EQUAL(meter->events.EVT_Magnetic_sensor, 0);
	CHECK_EQUAL(meter->events.EVT_Timer, 0);
	CHECK_EQUAL(meter->events.EVT_Valve, 0);
	CHECK_EQUAL(meter->events.EVT_Message_from_radio_module, 0);
	CHECK_EQUAL(meter->lid_has_just_been_opened, BOOL_FALSE);
}

TEST_GROUP(MODE_SWITCHER_NOPUSH) {
	CTMeter *meter;
	void	setup() {
		setup_meter(&meter);
		set_b2_press_count(0);
	}

	void	teardown() {
		mock().clear();
	}
};

TEST(MODE_SWITCHER_NOPUSH, nothing_happens) {
	CTMeter_modeSwitcher();
	mock().checkExpectations();
}

TEST_GROUP(MODE_SWITCHER_B2_ONE_SHORT_PRESS) {
	CTMeter *meter;

	void	setup() {
		setup_meter(&meter);
		set_b2_press_count(1);
		mock().expectOneCall("set_long_press")
			.andReturnValue(BOOL_FALSE);
	}

	void	teardown() {
		mock().clear();
	}
};

TEST(MODE_SWITCHER_B2_ONE_SHORT_PRESS, nothing_happens) {
	CTMeter_modeSwitcher();
	mock().checkExpectations();
}

TEST_GROUP(MODE_SWITCHER_B2_LONG_PRESSED) {
	CTMeter *meter;

	void	setup() {
		setup_meter(&meter);
		set_b2_press_count(1);
		mock().expectOneCall("set_long_press")
			.andReturnValue(BOOL_TRUE);
	}

	void	teardown() {
		mock().clear();
	}
};

TEST(MODE_SWITCHER_B2_LONG_PRESSED, long_b2_when_unknown_state) {
	int32_t current_index = 7010;

	/* In normal operation this should never happens, it is sufficient
	 * to simulate an UNKNOWN state */
	meter->status = CTMETER_IN_WIRING_MODE;
	expect_switch_to_storage(meter, current_index);

	CTMeter_modeSwitcher();

	check_entry_to_storage_mode_succeeded(meter, current_index);
	mock().checkExpectations();
}

TEST(MODE_SWITCHER_B2_LONG_PRESSED, long_b2_when_field) {
	meter->status = CTMETER_IN_FIELD_MODE;
	expect_switch_to_maintenance();
	
	CTMeter_modeSwitcher();

	CHECK_EQUAL(meter->status, CTMETER_IN_MAINTENANCE_MODE);
	mock().checkExpectations();
}

TEST(MODE_SWITCHER_B2_LONG_PRESSED, long_b2_when_maintenance) {
	int32_t current_index = 7010;

	meter->status = CTMETER_IN_MAINTENANCE_MODE;
	expect_switch_to_storage(meter, current_index);

	CTMeter_modeSwitcher();

	check_entry_to_storage_mode_succeeded(meter, current_index);
	mock().checkExpectations();
}

TEST(MODE_SWITCHER_B2_LONG_PRESSED, long_b2_when_storage) {
	meter->status = CTMETER_IN_STORAGE_MODE;
	expect_switch_to_field();

	CTMeter_modeSwitcher();
	
	CHECK_EQUAL(meter->status, CTMETER_IN_FIELD_MODE);
	mock().checkExpectations();
}

TEST_GROUP(MODE_SWITCHER_B2_PRESSED_3_WHEN_NO_FIELD) {
	CTMeter *meter;

	void	setup() {
		setup_meter(&meter);
	}

	void	teardown() {
		mock().clear();
	}
};

TEST(MODE_SWITCHER_B2_PRESSED_3_WHEN_NO_FIELD, nothing_happens) {
	set_b2_press_count(3);
	meter->status = CTMETER_IN_STORAGE_MODE;
	CTMeter_modeSwitcher();

	mock().checkExpectations();
}

TEST(MODE_SWITCHER_B2_PRESSED_3_WHEN_NO_FIELD, when_3_or_more_short_doesnt_check_for_long_press) {
	set_b2_press_count(5);
	meter->status = CTMETER_IN_STORAGE_MODE;
	CTMeter_modeSwitcher();

	mock().checkExpectations();
}

TEST_GROUP(MODE_SWITCHER_B2_PRESSED_3_WHEN_FIELD) {
	CTMeter *meter;
	int32_t current_index = 7010;

	void	setup() {
		setup_meter(&meter);
		set_b2_press_count(1000);

		meter->status = CTMETER_IN_FIELD_MODE;
		expect_switch_to_storage(meter, current_index);
	}

	void	teardown() {
		check_entry_to_storage_mode_succeeded(meter, current_index);

		mock().checkExpectations();
		mock().clear();
	}
};

TEST(MODE_SWITCHER_B2_PRESSED_3_WHEN_FIELD, valve_unknown) {
	meter->valve_status = VALVE_UNKNOWN;
	CTMeter_modeSwitcher();
}

TEST(MODE_SWITCHER_B2_PRESSED_3_WHEN_FIELD, valve_closed) {
	meter->valve_status = VALVE_CLOSED;
	CTMeter_modeSwitcher();
}

TEST(MODE_SWITCHER_B2_PRESSED_3_WHEN_FIELD, valve_opened) {
	meter->valve_status = VALVE_OPEN;

	CTMeter_modeSwitcher();
}

TEST(MODE_SWITCHER_B2_PRESSED_3_WHEN_FIELD, first_join_is_true) {
	meter->radio_status.first_join_network = 1;

	CTMeter_modeSwitcher();
}
