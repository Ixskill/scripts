"		HUD and CLarity	{{{
"	Here are set the variable that define what my vim looks like, and how it behaves

source $HOME/.vim/ade-sede.vim				"Sourcing my color file

syntax enable						"Easier to read with syntax highlight ;)

set ruler						"Ruler enabled bottom right of the screen

set nu							"Activates line number

set listchars=tab:>-,trail:Â·,eol:$			"Creates a list of characters -> Tab is now represented by >- and so on

set smartindent						"Activates auto indentation

set scrolloff=3						"Starts scrolling X times before the cursor reaches the bottom/top of the screen

set sidescrolloff=7					"Starts scrolling X times before the cursor reaches the right/left of the screen

set visualbell						"Disables sound

set mouse=a						"Enables mouse cursor

set autoread						"Keeps track of changes done outside vim

set history=1000					"Vim now remembers the 1000 last cmd you used

set timeoutlen=500					"The time you have to complete the command / mapping before it expires

set hidden						"Allows buffer to be set in BG without writing on the disk

"	Statusline settings {{{
set laststatus=2					"The status bar is always displayed at the bottom
set statusline+=%F

"					}}}

"				}}}

"		Augroups and autocmd related {{{
"	Augroups are a group of autocmd, and autocmd are a group of behaviors vim should have when a certain event is triggered
"	For exemple : 	- A Filetype being spotted
"			- The buffer being updated

"		Vim files {{{
augroup vim_files
	autocmd!
	autocmd Filetype vim setlocal foldmethod=marker
augroup	END
"}}}

"	C files {{{
augroup c_files
	autocmd!
	autocmd FileType c inoremap ( ()<left>
	autocmd FileType c inoremap [ []<left>
	autocmd FileType c inoremap ' ''<left>
	autocmd FileType c inoremap " ""<left>
	autocmd FileType c :iabbrev { {<cr>}<up> 
	autocmd FileType c let maplocalleader = ","
	autocmd	FileType c nnoremap <buffer> <localleader>c I//<esc>
	autocmd FileType c nnoremap <localleader>C A//<esc>
augroup END
"	}}}

"	Zsh files {{{
augroup sh_files
	autocmd!
	autocmd FileType zsh let maplocalleader = ","
	autocmd	FileType zsh nnoremap <buffer> <localleader>c I#<esc>
	autocmd FileType zsh inoremap ( ()<left>
	autocmd FileType zsh inoremap [ []<left>
	autocmd FileType zsh inoremap ' ''<left>
	autocmd FileType zsh inoremap " ""<left>
	autocmd FileType zsh :iabbrev { {<cr>}<up>
augroup END
"	}}}


"	}}}

"		Swapfiles {{{
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp "Sets backupdirectory for all swp files"
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp "}}}

"		Command completion {{{
set wildmenu										"Using <TAB> in the command line displays your options for completion
set wildmode=list:longest							"Wildmenu behaves like shell (completion to point of ambiguity)"
set wildignore=*.o,*.swp							"Files to ingore when browsing and completing options }}}

"		Key Mappings {{{
"	This section is about mappings ( binds if you prefer

"		Setting up mapleader key
let mapleader = ","

"		toggle paste on/off
nnoremap <leader>p : set paste!<cr>

"		Toggles hlsearch on/off
nnoremap <leader>n :set hlsearch!<cr>

"       Selects a full word in visual mode"
nnoremap <silent> <space> viw					

"		Toggles display of tabs and newline
nmap <silent> <leader><tab> :set nolist!<CR>

"		Opens and sources the vimrc file  ## NOTE : set env variable to the right path
nnoremap <leader>rc :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

"		Toggles relative number notation on/off
nnoremap <silent> <C-l> :set rnu! <cr>


"		Surrounds {{{
"	Here we define mappins to surround words / selections with a symbol

" Brackets
nnoremap <silent><leader>{ O{<esc><down>o}<up><up><cr>
vnoremap <silent><leader>{ c{<cr>}<up><cr><esc>P=<up>

"Single / double
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
vnoremap <leader>' c''<esc>P
vnoremap <leader>" c""<esc>P

"Parentheses
vnoremap <leader>( c()<esc>P
nnoremap <leader>( viw<esc>a)<esc>hbi(<esc>lel
vnoremap <leader>[ c[]<esc>P
nnoremap <leader>[ viw<esc>a]<esc>hbi[<esc>lel

"echoms the syntax group the word under the cursore belongs to
nnoremap <leader>sp :call <SID>SynStack()<CR>

"	}}}
"	}}}

"		Functions {{{
"	In this part we setup a few functions

" This functions shows us to what HL/syntax group an express belongs

function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

"			}}}

source $DOTFILES/zaz_header.vim
syntax keyword TODO contained NOTE
